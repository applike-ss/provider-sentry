// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IssueAlertInitParameters struct {

	// (String) Trigger actions when an event is captured by Sentry and any or all of the specified conditions happen.
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch *string `json:"actionMatch,omitempty" tf:"action_match,omitempty"`

	// (List of Map of String) List of actions.
	// List of actions.
	Actions []map[string]*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (List of Map of String) List of conditions.
	// List of conditions.
	Conditions []map[string]*string `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Perform issue alert in a specific environment.
	// Perform issue alert in a specific environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Trigger actions if all, any, or none of the specified filters match.
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch *string `json:"filterMatch,omitempty" tf:"filter_match,omitempty"`

	// (List of Map of String) List of filters.
	// List of filters.
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (Number) Perform actions at most once every X minutes for this issue. Defaults to 30.
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) The issue alert name.
	// The issue alert name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the issue alert belongs to.
	// The slug of the organization the issue alert belongs to.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The slug of the project to create the issue alert for.
	// The slug of the project to create the issue alert for.
	// +crossplane:generate:reference:type=github.com/justtrack/provider-sentry/apis/sentry/v1alpha1.Project
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in sentry to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in sentry to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`
}

type IssueAlertObservation struct {

	// (String) Trigger actions when an event is captured by Sentry and any or all of the specified conditions happen.
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	ActionMatch *string `json:"actionMatch,omitempty" tf:"action_match,omitempty"`

	// (List of Map of String) List of actions.
	// List of actions.
	Actions []map[string]*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (List of Map of String) List of conditions.
	// List of conditions.
	Conditions []map[string]*string `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Perform issue alert in a specific environment.
	// Perform issue alert in a specific environment.
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Trigger actions if all, any, or none of the specified filters match.
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	FilterMatch *string `json:"filterMatch,omitempty" tf:"filter_match,omitempty"`

	// (List of Map of String) List of filters.
	// List of filters.
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (Number) Perform actions at most once every X minutes for this issue. Defaults to 30.
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The internal ID for this issue alert.
	// The internal ID for this issue alert.
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// (String) The issue alert name.
	// The issue alert name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the issue alert belongs to.
	// The slug of the organization the issue alert belongs to.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The slug of the project to create the issue alert for.
	// The slug of the project to create the issue alert for.
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// (List of String, Deprecated) Use project (singular) instead.
	// Use `project` (singular) instead.
	Projects []*string `json:"projects,omitempty" tf:"projects,omitempty"`
}

type IssueAlertParameters struct {

	// (String) Trigger actions when an event is captured by Sentry and any or all of the specified conditions happen.
	// Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen.
	// +kubebuilder:validation:Optional
	ActionMatch *string `json:"actionMatch,omitempty" tf:"action_match,omitempty"`

	// (List of Map of String) List of actions.
	// List of actions.
	// +kubebuilder:validation:Optional
	Actions []map[string]*string `json:"actions,omitempty" tf:"actions,omitempty"`

	// (List of Map of String) List of conditions.
	// List of conditions.
	// +kubebuilder:validation:Optional
	Conditions []map[string]*string `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (String) Perform issue alert in a specific environment.
	// Perform issue alert in a specific environment.
	// +kubebuilder:validation:Optional
	Environment *string `json:"environment,omitempty" tf:"environment,omitempty"`

	// (String) Trigger actions if all, any, or none of the specified filters match.
	// Trigger actions if `all`, `any`, or `none` of the specified filters match.
	// +kubebuilder:validation:Optional
	FilterMatch *string `json:"filterMatch,omitempty" tf:"filter_match,omitempty"`

	// (List of Map of String) List of filters.
	// List of filters.
	// +kubebuilder:validation:Optional
	Filters []map[string]*string `json:"filters,omitempty" tf:"filters,omitempty"`

	// (Number) Perform actions at most once every X minutes for this issue. Defaults to 30.
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	// +kubebuilder:validation:Optional
	Frequency *float64 `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) The issue alert name.
	// The issue alert name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the issue alert belongs to.
	// The slug of the organization the issue alert belongs to.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The slug of the project to create the issue alert for.
	// The slug of the project to create the issue alert for.
	// +crossplane:generate:reference:type=github.com/justtrack/provider-sentry/apis/sentry/v1alpha1.Project
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Reference to a Project in sentry to populate project.
	// +kubebuilder:validation:Optional
	ProjectRef *v1.Reference `json:"projectRef,omitempty" tf:"-"`

	// Selector for a Project in sentry to populate project.
	// +kubebuilder:validation:Optional
	ProjectSelector *v1.Selector `json:"projectSelector,omitempty" tf:"-"`
}

// IssueAlertSpec defines the desired state of IssueAlert
type IssueAlertSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IssueAlertParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IssueAlertInitParameters `json:"initProvider,omitempty"`
}

// IssueAlertStatus defines the observed state of IssueAlert.
type IssueAlertStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IssueAlertObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IssueAlert is the Schema for the IssueAlerts API. Sentry Issue Alert resource. Note that there's no public documentation for the values of conditions, filters, and actions. You can either inspect the request payload sent when creating or editing an issue alert on Sentry or inspect Sentry's rules registry in the source code https://github.com/getsentry/sentry/tree/master/src/sentry/rules. Since v0.11.2, you should also omit the name property of each condition, filter, and action.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sentry}
type IssueAlert struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actionMatch) || (has(self.initProvider) && has(self.initProvider.actionMatch))",message="spec.forProvider.actionMatch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.actions) || (has(self.initProvider) && has(self.initProvider.actions))",message="spec.forProvider.actions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.conditions) || (has(self.initProvider) && has(self.initProvider.conditions))",message="spec.forProvider.conditions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filterMatch) || (has(self.initProvider) && has(self.initProvider.filterMatch))",message="spec.forProvider.filterMatch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.frequency) || (has(self.initProvider) && has(self.initProvider.frequency))",message="spec.forProvider.frequency is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	Spec   IssueAlertSpec   `json:"spec"`
	Status IssueAlertStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IssueAlertList contains a list of IssueAlerts
type IssueAlertList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IssueAlert `json:"items"`
}

// Repository type metadata.
var (
	IssueAlert_Kind             = "IssueAlert"
	IssueAlert_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IssueAlert_Kind}.String()
	IssueAlert_KindAPIVersion   = IssueAlert_Kind + "." + CRDGroupVersion.String()
	IssueAlert_GroupVersionKind = CRDGroupVersion.WithKind(IssueAlert_Kind)
)

func init() {
	SchemeBuilder.Register(&IssueAlert{}, &IssueAlertList{})
}
