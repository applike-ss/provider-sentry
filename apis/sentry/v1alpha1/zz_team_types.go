// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TeamInitParameters struct {

	// (String) The name of the team.
	// The name of the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the team should be created for.
	// The slug of the organization the team should be created for.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional slug for this team.
	// The optional slug for this team.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

type TeamObservation struct {

	// (Boolean)
	HasAccess *bool `json:"hasAccess,omitempty" tf:"has_access,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The internal ID for this team.
	// The internal ID for this team.
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// (Boolean)
	IsMember *bool `json:"isMember,omitempty" tf:"is_member,omitempty"`

	// (Boolean)
	IsPending *bool `json:"isPending,omitempty" tf:"is_pending,omitempty"`

	// (String) The name of the team.
	// The name of the team.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the team should be created for.
	// The slug of the organization the team should be created for.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional slug for this team.
	// The optional slug for this team.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String, Deprecated) Use internal_id instead.
	// Use `internal_id` instead.
	TeamID *string `json:"teamId,omitempty" tf:"team_id,omitempty"`
}

type TeamParameters struct {

	// (String) The name of the team.
	// The name of the team.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the team should be created for.
	// The slug of the organization the team should be created for.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional slug for this team.
	// The optional slug for this team.
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`
}

// TeamSpec defines the desired state of Team
type TeamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TeamParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TeamInitParameters `json:"initProvider,omitempty"`
}

// TeamStatus defines the observed state of Team.
type TeamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TeamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Team is the Schema for the Teams API. Sentry Team resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sentry}
type Team struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	Spec   TeamSpec   `json:"spec"`
	Status TeamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TeamList contains a list of Teams
type TeamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Team `json:"items"`
}

// Repository type metadata.
var (
	Team_Kind             = "Team"
	Team_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Team_Kind}.String()
	Team_KindAPIVersion   = Team_Kind + "." + CRDGroupVersion.String()
	Team_GroupVersionKind = CRDGroupVersion.WithKind(Team_Kind)
)

func init() {
	SchemeBuilder.Register(&Team{}, &TeamList{})
}
