// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProjectInitParameters struct {

	// (Number) The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay *float64 `json:"digestsMaxDelay,omitempty" tf:"digests_max_delay,omitempty"`

	// (Number) The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay *float64 `json:"digestsMinDelay,omitempty" tf:"digests_min_delay,omitempty"`

	// (String) The name for the project.
	// The name for the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the project belongs to.
	// The slug of the organization the project belongs to.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional platform for this project.
	// The optional platform for this project.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// (Number) Hours in which an issue is automatically resolve if not seen after this amount of time.
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge *float64 `json:"resolveAge,omitempty" tf:"resolve_age,omitempty"`

	// (String) The optional slug for this project.
	// The optional slug for this project.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String, Deprecated) The slug of the team to create the project for. Deprecated Use teams instead.
	// The slug of the team to create the project for. **Deprecated** Use `teams` instead.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (Set of String) The slugs of the teams to create the project for.
	// The slugs of the teams to create the project for.
	// +crossplane:generate:reference:type=github.com/justtrack/provider-sentry/apis/sentry/v1alpha1.Team
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in sentry to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in sentry to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`
}

type ProjectObservation struct {

	// (String)
	Color *string `json:"color,omitempty" tf:"color,omitempty"`

	// (Number) The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay *float64 `json:"digestsMaxDelay,omitempty" tf:"digests_max_delay,omitempty"`

	// (Number) The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay *float64 `json:"digestsMinDelay,omitempty" tf:"digests_min_delay,omitempty"`

	// (List of String)
	Features []*string `json:"features,omitempty" tf:"features,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The internal ID for this project.
	// The internal ID for this project.
	InternalID *string `json:"internalId,omitempty" tf:"internal_id,omitempty"`

	// (Boolean, Deprecated)
	IsBookmarked *bool `json:"isBookmarked,omitempty" tf:"is_bookmarked,omitempty"`

	// (Boolean)
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// (String) The name for the project.
	// The name for the project.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the project belongs to.
	// The slug of the organization the project belongs to.
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional platform for this project.
	// The optional platform for this project.
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// (String, Deprecated) Use internal_id instead.
	// Use `internal_id` instead.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// (Number) Hours in which an issue is automatically resolve if not seen after this amount of time.
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge *float64 `json:"resolveAge,omitempty" tf:"resolve_age,omitempty"`

	// (String) The optional slug for this project.
	// The optional slug for this project.
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String)
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// (String, Deprecated) The slug of the team to create the project for. Deprecated Use teams instead.
	// The slug of the team to create the project for. **Deprecated** Use `teams` instead.
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (Set of String) The slugs of the teams to create the project for.
	// The slugs of the teams to create the project for.
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`
}

type ProjectParameters struct {

	// (Number) The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	// +kubebuilder:validation:Optional
	DigestsMaxDelay *float64 `json:"digestsMaxDelay,omitempty" tf:"digests_max_delay,omitempty"`

	// (Number) The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	// +kubebuilder:validation:Optional
	DigestsMinDelay *float64 `json:"digestsMinDelay,omitempty" tf:"digests_min_delay,omitempty"`

	// (String) The name for the project.
	// The name for the project.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The slug of the organization the project belongs to.
	// The slug of the organization the project belongs to.
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// (String) The optional platform for this project.
	// The optional platform for this project.
	// +kubebuilder:validation:Optional
	Platform *string `json:"platform,omitempty" tf:"platform,omitempty"`

	// (Number) Hours in which an issue is automatically resolve if not seen after this amount of time.
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	// +kubebuilder:validation:Optional
	ResolveAge *float64 `json:"resolveAge,omitempty" tf:"resolve_age,omitempty"`

	// (String) The optional slug for this project.
	// The optional slug for this project.
	// +kubebuilder:validation:Optional
	Slug *string `json:"slug,omitempty" tf:"slug,omitempty"`

	// (String, Deprecated) The slug of the team to create the project for. Deprecated Use teams instead.
	// The slug of the team to create the project for. **Deprecated** Use `teams` instead.
	// +kubebuilder:validation:Optional
	Team *string `json:"team,omitempty" tf:"team,omitempty"`

	// (Set of String) The slugs of the teams to create the project for.
	// The slugs of the teams to create the project for.
	// +crossplane:generate:reference:type=github.com/justtrack/provider-sentry/apis/sentry/v1alpha1.Team
	// +kubebuilder:validation:Optional
	// +listType=set
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// References to Team in sentry to populate teams.
	// +kubebuilder:validation:Optional
	TeamsRefs []v1.Reference `json:"teamsRefs,omitempty" tf:"-"`

	// Selector for a list of Team in sentry to populate teams.
	// +kubebuilder:validation:Optional
	TeamsSelector *v1.Selector `json:"teamsSelector,omitempty" tf:"-"`
}

// ProjectSpec defines the desired state of Project
type ProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProjectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProjectInitParameters `json:"initProvider,omitempty"`
}

// ProjectStatus defines the observed state of Project.
type ProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Project is the Schema for the Projects API. Sentry Project resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,sentry}
type Project struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	Spec   ProjectSpec   `json:"spec"`
	Status ProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProjectList contains a list of Projects
type ProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Project `json:"items"`
}

// Repository type metadata.
var (
	Project_Kind             = "Project"
	Project_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Project_Kind}.String()
	Project_KindAPIVersion   = Project_Kind + "." + CRDGroupVersion.String()
	Project_GroupVersionKind = CRDGroupVersion.WithKind(Project_Kind)
)

func init() {
	SchemeBuilder.Register(&Project{}, &ProjectList{})
}
